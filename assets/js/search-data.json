{
  
    
        "post0": {
            "title": "Title",
            "content": "Aprendendo Closure - Parte 1 . Essas série se chama &quot;Aprendendo Closure&quot; pois eu estou de fato aprendendo clojure e essas são minhas notas de estudo. Futuramente colocarem um blog ou no medium. Então se for acompanha( caso não encontre outra fonte que te agrade e por algum motivo você quiser ver as notas de alguem que assim como você começou sem saber nada da linguagem) tente seguir linearmente, assim podera identificar quando eu me auto corrigir em algum conceito mal fixado. Primeiro vamos passar pelas funções basicas de aritméticas. . (+ 10 9) . 19 . . Important: Em clojure não precisamos usar virgulas, mas caso queira usa-lás tbm é algo possivel . (+,10,9) . 19 . Para subtrações continuamos na mesma notação, o operador vem primeiro . (- 10 9) . 1 . Divisão: . (/ 24 4) . 6 . Multiplicação: . (* 11 11) . 121 . Clojure meio que usa uma notação matematica, então assim como fazemos pra resolver equações matematicas resolvendo os . Parenteses interiores primeiro de dentro pra fora. Em lisp não é diferente . Dessa forma a expressão abaixo é calculada primeiro multiplicação (* 2 2) resultando 4, depois a soma (+ 1 2) resultando 3 e então finalmente a soma geral (+ 3 4) que resulta em 7 . (+ (+ 1 2) (* 2 2)) . 7 . Pra criar uma variável devemos usar def como usado abaixo . (def a 10) . #&#39;user/a . Acima criamos uma variavel a de valor 10 . Em clojure as listas são representadas por () ,os vetores são representados por [] Em clojure as listas são representadas por () ,os vetores são representados por [] , os sets e maps são representados {} . Para criarmos uma lista vazia l basta executar o seguinte comando: . (def l &#39;()) . #&#39;user/l . Você deve está se perguntando o por que da &#39; , porem como deve ter reparado as expressões de clojure sempre vão dentro de (), alias por ser um dialeto de lisp que nada mais é que list processing. Porem assim como na expressão (+ 1 2) as listas ficam dentro de () e sempre que o interpretador do clojure se depara com parenteses ele espera que o primeiro elemento seja uma função seguida pelos seus argumentos do tipo: (fn arg arg). Usamos o &#39; apenas para dizer o interpretador da linguagem que não se trata de uma função e sim uma lista. . Alem de criar uma lista vazia, também é possivel que criemos uma lista com alguns elementos dentro, vejamos: . (def m &#39;(1 2 3 4)) . #&#39;user/m . Se for necessario adcionar um item em uma lista , usamos cons . (cons 2 &#39;(1 2 3)) . (2 1 2 3) . Como é possivel notar acima, clojure adciona o elemento na primeira posição, alias em clojure ao contrario de python e semelhante a Clang as listas são listas linkas. O que significa que para adcionar um item na ultima posição de uma lista o clojure deveria pecorrer todas as posições da lista. . Explicando melhor, uma lista linkada significa que o primeiro elemento armazena a posição na memoria do segundo elemento, o segundo elemento armazena a posição na memoria do terceiro elemento, e assim .... . Além de usar o vetor descrito, podemos usar o nome do vetor com cons : . (cons 2 m) . (2 1 2 3 4) . porem é interessante notar que o vetor m não é alterado. Pois em clojure trabalhamos com dados imultaveis. . m . (1 2 3 4) . se quisermos remover um item de uma lista podemos usar peek que irá remover o primeiro item. . (peek m) . 1 . Pop nos mostra todos os item fora o primeiro de uma lista. Lembrando que como uma list é linkada a partir da primera posição é normal que as funções de manipulação trabalhem a partir da primeira posição. Isso é diferente para vetores que veremos mais a seguir, pois vetores tem acesso via índice: . (pop m) . (2 3 4) . Vetores . Vamos falar sobre vetores agora e pra começar podemos notar algumas similaridades com listas. Por exemplo para definir um vetor a vazio fazemos da seguinte forma: . (def a []) . #&#39;user/a . Podemos criar um vetor b com alguns itens. . (def b [1 2 3 4]) . #&#39;user/b . Para adcionar um item no vetor, diferente das listas onde usamos cons usaremos conj e diferentes das listas passamos o vetor como primeiro argumento (conj [] argx): . (conj [1 2 3] 4) . [1 2 3 4] . Importante notar que diferentemente das listas um vetor adciona um novo elemento na sua ultima posição . Semelhante as listas , também é possível aplicar peek and pop em um vetor. Exemplos abaixo: . (peek [12 14 13]) . 13 . (pop [12 14 13]) . [12 14] . Nos vetores também é possível acessar um item pelo seu indice: . (get [3 19 12 15 10 21 24 35 56] 1) . 19 . (get [3 19 12 15 10 21 24 35 56] 0) . 3 . Importante lembrar que em computação os indices normalmente começam no 0 . Para adcionar itens em determinadas posição de um vetor podemos usar assoc . (assoc [1 2 3 5 8] 5 13) . [1 2 3 5 8 13] . No exemplo acima, apenas mandamos o interpretador colocar o numero 13 na 5 posição. Pois usando assoc é possível colocar o elemento em qualquer posição apenas setando o índice. . Importante: Caso você queira colocar o elemento na ultima posição sem setar o índice , use o conj já mostrado nesse post . (nth [1 4 5 6 8 9] 5) . 9 .",
            "url": "https://nilberthsouza.github.io/hironudesu/2020/04/09/Aprendendo-Clojure-Parte-1.html",
            "relUrl": "/2020/04/09/Aprendendo-Clojure-Parte-1.html",
            "date": " • Apr 9, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . Front Matter is a markdown cell at the beginning of your notebook that allows you to inject metadata into your notebook. For example: . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks just like you can with markdown. . For example, here is a footnote 1. . . This is the footnote.&#8617; . |",
            "url": "https://nilberthsouza.github.io/hironudesu/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Test Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://nilberthsouza.github.io/hironudesu/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://nilberthsouza.github.io/hironudesu/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}